// src/pages/Inscription.jsx
import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { Link, useNavigate } from 'react-router-dom';
// import Navbar from '../components/Navbar/Navbar'; // Gardez si vous l'utilisez, sinon vous pouvez le supprimer
import axiosInstance from '../api/axiosInstance';
import { toast } from 'react-toastify'; // <-- Importez 'toast' de 'react-toastify'
import styles from '../styles/Inscription.module.css';

const Inscription = () => {
  const { register, handleSubmit, formState: { errors }, watch } = useForm();
  const [isLoading, setIsLoading] = useState(false);
  const [networkError, setNetworkError] = useState(null);
  const navigate = useNavigate();

  const password = watch('motDePasse');

  const onSubmit = async (data) => {
    setIsLoading(true);
    setNetworkError(null); // R√©initialise l'erreur r√©seau √† chaque soumission

    try {
      const registerData = {
        identifiant: data.identifiant,
        email: data.email,
        motDePasse: data.motDePasse
      };
      
      console.log('üì§ Envoi des donn√©es d\'inscription:', registerData);
      
      const response = await axiosInstance.post('/users/register', registerData);
      
      console.log('‚úÖ Inscription r√©ussie:', response.data);
      // Message de succ√®s chaleureux
      toast.success('üéâ Bienvenue ! Votre compte a √©t√© cr√©√© avec succ√®s. Vous pouvez maintenant vous connecter et explorer !');
      
      navigate('/connexion'); // Redirige l'utilisateur apr√®s une inscription r√©ussie
      
    } catch (error) {
      console.error('‚ùå Erreur inscription:', error);
      
      if (error.code === 'ERR_NETWORK') {
        // Erreur r√©seau : impossible de contacter le serveur
        setNetworkError('Impossible de contacter le serveur. V√©rifiez que le backend est d√©marr√© sur http://localhost:5000');
        // Message de toast plus convivial pour le r√©seau
        toast.error('Houston, on a un probl√®me ! üõ∞Ô∏è Impossible de se connecter √† notre serveur. V√©rifiez votre connexion internet ou revenez nous voir plus tard !');
      } else if (error.response) {
        // Erreur de r√©ponse du serveur (status code 4xx ou 5xx)
        const { status, data } = error.response;
        let userFriendlyMessage = 'Oups ! Une petite erreur est survenue de notre c√¥t√©. Veuillez r√©essayer dans un instant.'; // Message par d√©faut

        if (status === 400) {
          // Erreur Bad Request : donn√©es invalides (validation c√¥t√© backend)
          if (data.message) {
            // Si le backend fournit un message sp√©cifique (ex: "Cet identifiant est d√©j√† utilis√©", "Email invalide")
            if (data.message.includes('identifiant d√©j√† utilis√©')) {
                userFriendlyMessage = 'Cet identifiant est d√©j√† pris !  Essayez-en un autre pour nous rejoindre.';
            } else if (data.message.includes('email d√©j√† utilis√©')) {
                userFriendlyMessage = 'Cet e-mail est d√©j√† associ√© √† un compte. Vous avez peut-√™tre d√©j√† un profil chez nous ? ü§î';
            } else if (data.message.includes('format d\'email invalide')) {
                userFriendlyMessage = 'Hmm, le format de votre e-mail ne semble pas correct. Pouvez-vous v√©rifier ? üìß';
            } else if (data.message.includes('mot de passe trop court') || data.message.includes('trop court')) {
                userFriendlyMessage = 'Votre mot de passe est un peu court. Il nous faut au moins 6 caract√®res pour bien prot√©ger votre compte ! ';
            } else {
                // Message g√©n√©rique pour d'autres erreurs 400 avec message backend
                userFriendlyMessage = `D√©sol√© ! ${data.message} Veuillez v√©rifier vos informations.`;
            }
          } else {
            // Message g√©n√©rique pour 400 sans message backend sp√©cifique
            userFriendlyMessage = 'Il semble y avoir une erreur dans les informations que vous avez fournies. Pourriez-vous v√©rifier les champs et r√©essayer ?';
          }
        } else if (status === 409) { 
          // Conflit : souvent utilis√© pour des ressources d√©j√† existantes (ex: email/identifiant d√©j√† pris)
          userFriendlyMessage = 'Cet identifiant ou cet e-mail est d√©j√† pris. Pas de panique, choisissez-en un autre et vous serez des n√¥tres !';
        } else if (status >= 500) {
          // Erreur serveur 5xx : probl√®me c√¥t√© serveur (interne, base de donn√©es, etc.)
          userFriendlyMessage = 'A√Øe ! Il y a eu un souci de notre c√¥t√©. üõ†Ô∏è Notre √©quipe travaille d√©j√† √† le r√©soudre. Merci de r√©essayer plus tard !';
        } 
        
        toast.error(` ${userFriendlyMessage}`); // Affiche le message convivial dans le toast

      } else {
        // Autres types d'erreurs inattendues (par exemple, un probl√®me de code c√¥t√© client avant la requ√™te Axios)
        toast.error('Quelque chose s\'est mal pass√©...  Notre √©quipe est d√©j√† sur le coup pour r√©soudre √ßa ! Veuillez r√©essayer plus tard.');
      }
    } finally {
      setIsLoading(false); // Arr√™te le chargement quelle que soit l'issue
    }
  };

  return (
    <div>
      {/* <Navbar /> // D√©j√† inclus dans App.jsx */}
      
      <div className={styles.container}>
        <div className={styles.card}>
          <h2 className={styles.titre}>Cr√©er un compte</h2>
          <p className={styles.subtitle}>
            Rejoignez notre communaut√© de passionn√©s de cuisine
          </p>

          {/* Affichage du message d'erreur r√©seau orient√© utilisateur */}
          {networkError && (
            <div className={styles.networkError}>
              <h3>Oups ! Probl√®me de connexion... </h3>
              <p>Il semblerait que nous ayons du mal √† joindre notre serveur en ce moment.</p>
              <p>Ne vous inqui√©tez pas, ce n'est probablement pas de votre faute !</p>
              <p>Voici quelques pistes simples qui pourraient aider :</p>
              <ul>
                <li>V√©rifiez si vous √™tes bien **connect√© √† internet**.</li>
                <li>Essayez de **rafra√Æchir la page** ou de **r√©essayer dans quelques instants**.</li>
              </ul>
              {/* Optionnel : Garder les d√©tails techniques cach√©s pour les d√©veloppeurs */}
              {/*
              <details>
                <summary>D√©tails pour les d√©veloppeurs</summary>
                <p>Impossible de contacter le serveur backend sur http://localhost:5000</p>
                <p>Solutions possibles :</p>
                <ul>
                  <li>D√©marrer le serveur backend : <code>npm start</code></li>
                  <li>V√©rifier que le serveur fonctionne sur le port 5000</li>
                  <li>V√©rifier la configuration de l'URL dans axiosInstance.js</li>
                </ul>
              </details>
              */}
            </div>
          )}

          <form onSubmit={handleSubmit(onSubmit)} className={styles.form}>
            {/* Champ Identifiant */}
            <div className={styles.formGroup}>
              <label className={styles.label}>
                Identifiant
              </label>
              <input
                type="text"
                {...register('identifiant', { 
                  required: 'L\'identifiant est requis',
                  minLength: { value: 3, message: 'Minimum 3 caract√®res' }
                })}
                className={`${styles.input} ${errors.identifiant ? styles.error : ''}`}
                placeholder="Votre identifiant"
              />
              {errors.identifiant && (
                <p className={styles.errorMessage}>
                  {errors.identifiant.message}
                </p>
              )}
            </div>

            {/* Champ Email */}
            <div className={styles.formGroup}>
              <label className={styles.label}>
                Adresse e-mail
              </label>
              <input
                type="email"
                {...register('email', { 
                  required: 'L\'email est requis',
                  pattern: {
                    value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
                    message: 'Format d\'email invalide'
                  }
                })}
                className={`${styles.input} ${errors.email ? styles.error : ''}`}
                placeholder="votre@email.com"
              />
              {errors.email && (
                <p className={styles.errorMessage}>
                  {errors.email.message}
                </p>
              )}
            </div>

            {/* Champ Mot de passe */}
            <div className={styles.formGroup}>
              <label className={styles.label}>
                Mot de passe
              </label>
              <input
                type="password"
                {...register('motDePasse', { 
                  required: 'Le mot de passe est requis',
                  minLength: { value: 6, message: 'Minimum 6 caract√®res' }
                })}
                className={`${styles.input} ${errors.motDePasse ? styles.error : ''}`}
                placeholder="Votre mot de passe"
              />
              {errors.motDePasse && (
                <p className={styles.errorMessage}>
                  {errors.motDePasse.message}
                </p>
              )}
            </div>

            {/* Champ Confirmation mot de passe */}
            <div className={styles.formGroup}>
              <label className={styles.label}>
                Confirmer le mot de passe
              </label>
              <input
                type="password"
                {...register('confirmPassword', { 
                  required: 'Veuillez confirmer votre mot de passe',
                  validate: value => value === password || 'Les mots de passe ne correspondent pas'
                })}
                className={`${styles.input} ${errors.confirmPassword ? styles.error : ''}`}
                placeholder="Confirmer votre mot de passe"
              />
              {errors.confirmPassword && (
                <p className={styles.errorMessage}>
                  {errors.confirmPassword.message}
                </p>
              )}
            </div>

            {/* Bouton de soumission */}
            <button
              type="submit"
              disabled={isLoading}
              className={styles.bouton}
            >
              {isLoading ? (
                <>
                  <span className={styles.spinner}></span>
                  <span>Inscription en cours...</span> 
                </>
              ) : (
                'Cr√©er mon compte'
              )}
            </button>
          </form>

          {/* Lien vers la page de connexion */}
          <div className={styles.linkContainer}>
            <p>
              Vous avez d√©j√† un compte ?{' '}
              <Link 
                to="/connexion" 
                className={styles.link}
              >
                Se connecter
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Inscription;